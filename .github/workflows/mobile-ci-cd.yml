name: Android CI/CD
on:
  workflow_call:
    inputs:
      package-name:
        description: "The Android package name from the app manifest"
        required: true
        type: string
      track:
        description: "The Play Store track to release to (internal, alpha, beta, production)"
        required: true
        type: string
      push-changes:
        description: 'Whether commit and push the created fastlane configuration'
        required: false
        default: false
        type: boolean
      git-user-name:
        description: 'Required when push-changes is set, the git user.name'
        required: false
        type: string
      git-user-email:
        description: 'Required when push-changes is set, the git user.email'
        required: false
        type: string
    secrets:
      keystore:
        description: 'Base64 encoded Android keystore'
        required: true
      keystore-password:
        description: "The keystore password"
        required: true
      key-alias:
        description: "The alias of the signing key"
        required: true
      key-password:
        description: "The password of the signing key"
        required: true
      play-store-creds:
        description: 'Your Play Store credentials'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build & ship the app
    env:
      MOBILE_CI_CD_DIR: ${{ github.WORKSPACE }}/mobile-ci-cd
      PROJECT_ROOT: ${{ github.WORKSPACE }}/caller-repo
      SECRETS_DIR: ${{ github.WORKSPACE }}/secrets
      JSON_KEY_FILE: ${{ github.WORKSPACE }}/secrets/play-store-credentials.json
    steps:
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Check out Mobile CI/CD
        uses: actions/checkout@v2
        with:
          repository: bbq-beets/mobile-ci-cd
          path: ${{ env.MOBILE_CI_CD_DIR }}
      - name: Check out caller repository
        uses: actions/checkout@v2
        with:
          path: ${{ env.PROJECT_ROOT }}
      - name: Install required software
        run: |
          cd $PROJECT_ROOT
          sudo gem install bundler
      - name: Create required files
        env:
          JSON_KEY_FILE: ${{ env.SECRETS_DIR }}/play-store-credentials.json
          FASTLANEDIR: ${{ env.PROJECT_ROOT }}/fastlane
        run: |
          cd $PROJECT_ROOT
          
          if [[ ! -f "Gemfile" ]]; then
              echo "Copying Gemfile"
              cp $MOBILE_CI_CD_DIR/Gemfile Gemfile
          else
              # Add fastlane to the exising gemfile if it isn't referenced (including as a dependency)
              if ! bundle list | grep 'fastlane'; then
                  bundle add fastlane
              else
                  echo "Gemfile already exists and already references fastlane; not taking any action"
              fi
          fi

          if [[ ! -d "$FASTLANEDIR" ]]; then
              echo "Creating $FASTLANEDIR dir"
              mkdir $FASTLANEDIR
          else
              echo "$FASTLANEDIR directory already exists"
          fi

          cd $FASTLANEDIR

          if [[ ! -f "Appfile" ]]; then
              echo "Creating Appfile"
              touch Appfile
              echo 'json_key_file("'$JSON_KEY_FILE'")' >> Appfile
              echo 'package_name("${{ secrets.package_name }}")' >> Appfile
          else
              echo "Appfile already exists; not taking any action"
          fi

          if [[ ! -f "Fastfile" ]]; then
              echo "Copying Fastfile"
              cp $MOBILE_CI_CD_DIR/Fastfile Fastfile
          else
              echo "Fastfile already exists; not taking any action"
          fi

          if [[ ! -f "Pluginfile" ]]; then
              echo "Copying Pluginfile"
              cp $MOBILE_CI_CD_DIR/Pluginfile Pluginfile
          else
              echo "Pluginfile already exists; TODO add the plugin we need if it isn't in there"
          fi
      - name: Call fastlane
        env:
          JSON_KEY_FILE: ${{ env.SECRETS_DIR }}/play-store-credentials.json
          KEYSTORE_FILE: ${{ env.SECRETS_DIR }}/keystore.jks
          PACKAGE_NAME: ${{ inputs.package-name }}
          TRACK: ${{ inputs.track }}
          KEY_PASSWORD: ${{ secrets.key-password }}
          KEY_ALIAS: ${{ secrets.key-alias }}
          KEYSTORE_PASSWORD: ${{ secrets.keystore-password }}
        run: |       
          cd $PROJECT_ROOT

          echo "Running Bundler"
          bundle install

          mkdir $SECRETS_DIR
          echo "Storing keystore"
          echo '${{ secrets.keystore }}' | base64 --decode > $KEYSTORE_FILE

          echo "Getting fingerprint"
          keytool -list -v -alias key0 -keystore $KEYSTORE_FILE

          echo "Storing play store credentials"
          echo '${{ secrets.play-store-creds }}' > $JSON_KEY_FILE

          echo "Running fastlane"
          bundle exec fastlane android deploy
          
      - name: Clean up
        run: |
          # TODO always clean up, also in case of failure
          rm -r $SECRETS_DIR
          
      - name: Commit the changes
        run: |
          # Commit and push specific changes
          if [[ ${{ inputs.push-changes }} ]]; then
              git config --global user.name ${{ inputs.git-user-name }}
              git config --global user.email ${{ inputs.git-user-email }}
              # TODO do we care which branch we're on?
              # TODO do we want to commit Gemfile.lock?
              git add $PROJECT_ROOT/Gemfile
              git add $FASTLANEDIR/Appfile
              git add $FASTLANEDIR/Fastfile
              git add $FASTLANEDIR/Pluginfile
              git commit -m "Configure fastlane"
              # TODO We probably don't have the right to push...
          fi

